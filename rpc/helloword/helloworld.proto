syntax = "proto3";

option go_package = "hello_world";
import "google/api/annotations.proto";

message HelloRequest{
  string message = 1;
}

message HelloResponse{
  string message = 1;
}

service Greeter{

  //Unary RPCs where the client sends a single request to the server and gets a single response back,
  //just like a normal function call.
  rpc SayHello(HelloRequest) returns (HelloResponse){
    option (google.api.http) = {
      post: "/v1/example/echo"
      body: "*"
    };
  }

  //Server streaming RPCs where the client sends a request to the server and gets a stream
  //to read a sequence of messages back.
  //The client reads from the returned stream until there are no more messages.
  //gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){}

  //Client streaming RPCs where the client writes a sequence of messages
  //and sends them to the server, again using a provided stream.
  //Once the client has finished writing the messages,
  //it waits for the server to read them and return its response.
  //Again gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse){}

  //Bidirectional streaming RPCs where both sides send a sequence of messages
  //using a read-write stream.
  //The two streams operate independently, so clients and servers can
  //read and write in whatever order they like: for example,
  //the server could wait to receive all the client messages before writing its responses,
  //or it could alternately read a message then write a message,
  //or some other combination of reads and writes.
  //The order of messages in each stream is preserved.
  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){}
}

